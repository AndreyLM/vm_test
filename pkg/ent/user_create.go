// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/andreylm/vm_test/pkg/ent/user"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	id               *int64
	user_name        *string
	full_name        *string
	city             *string
	birth_date       *time.Time
	department       *string
	gender           *string
	experience_years *int
}

// SetUserName sets the user_name field.
func (uc *UserCreate) SetUserName(s string) *UserCreate {
	uc.user_name = &s
	return uc
}

// SetFullName sets the full_name field.
func (uc *UserCreate) SetFullName(s string) *UserCreate {
	uc.full_name = &s
	return uc
}

// SetCity sets the city field.
func (uc *UserCreate) SetCity(s string) *UserCreate {
	uc.city = &s
	return uc
}

// SetBirthDate sets the birth_date field.
func (uc *UserCreate) SetBirthDate(t time.Time) *UserCreate {
	uc.birth_date = &t
	return uc
}

// SetDepartment sets the department field.
func (uc *UserCreate) SetDepartment(s string) *UserCreate {
	uc.department = &s
	return uc
}

// SetGender sets the gender field.
func (uc *UserCreate) SetGender(s string) *UserCreate {
	uc.gender = &s
	return uc
}

// SetExperienceYears sets the experience_years field.
func (uc *UserCreate) SetExperienceYears(i int) *UserCreate {
	uc.experience_years = &i
	return uc
}

// SetID sets the id field.
func (uc *UserCreate) SetID(i int64) *UserCreate {
	uc.id = &i
	return uc
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	if uc.user_name == nil {
		return nil, errors.New("ent: missing required field \"user_name\"")
	}
	if uc.full_name == nil {
		return nil, errors.New("ent: missing required field \"full_name\"")
	}
	if uc.city == nil {
		return nil, errors.New("ent: missing required field \"city\"")
	}
	if uc.birth_date == nil {
		return nil, errors.New("ent: missing required field \"birth_date\"")
	}
	if uc.department == nil {
		return nil, errors.New("ent: missing required field \"department\"")
	}
	if uc.gender == nil {
		return nil, errors.New("ent: missing required field \"gender\"")
	}
	if uc.experience_years == nil {
		return nil, errors.New("ent: missing required field \"experience_years\"")
	}
	if err := user.ExperienceYearsValidator(*uc.experience_years); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"experience_years\": %v", err)
	}
	return uc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	var (
		u     = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: user.FieldID,
			},
		}
	)
	if value := uc.id; value != nil {
		u.ID = *value
		_spec.ID.Value = *value
	}
	if value := uc.user_name; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldUserName,
		})
		u.UserName = *value
	}
	if value := uc.full_name; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldFullName,
		})
		u.FullName = *value
	}
	if value := uc.city; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldCity,
		})
		u.City = *value
	}
	if value := uc.birth_date; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: user.FieldBirthDate,
		})
		u.BirthDate = *value
	}
	if value := uc.department; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldDepartment,
		})
		u.Department = *value
	}
	if value := uc.gender; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: user.FieldGender,
		})
		u.Gender = *value
	}
	if value := uc.experience_years; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  *value,
			Column: user.FieldExperienceYears,
		})
		u.ExperienceYears = *value
	}
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if u.ID == 0 {
		id := _spec.ID.Value.(int64)
		u.ID = int64(id)
	}
	return u, nil
}
